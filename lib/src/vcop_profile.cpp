/****************************************************************************/
/*  vcop_profile.cpp          - VCOP Kernel Automatic Profiling             */
/*                                                                          */
/* Copyright (c) 2016 Texas Instruments Incorporated                        */
/* http://www.ti.com/                                                       */
/*                                                                          */
/*  Redistribution and  use in source  and binary forms, with  or without   */
/*  modification,  are permitted provided  that the  following conditions   */
/*  are met:                                                                */
/*                                                                          */
/*     Redistributions  of source  code must  retain the  above copyright   */
/*     notice, this list of conditions and the following disclaimer.        */
/*                                                                          */
/*     Redistributions in binary form  must reproduce the above copyright   */
/*     notice, this  list of conditions  and the following  disclaimer in   */
/*     the  documentation  and/or   other  materials  provided  with  the   */
/*     distribution.                                                        */
/*                                                                          */
/*     Neither the  name of Texas Instruments Incorporated  nor the names   */
/*     of its  contributors may  be used to  endorse or  promote products   */
/*     derived  from   this  software  without   specific  prior  written   */
/*     permission.                                                          */
/*                                                                          */
/*  THIS SOFTWARE  IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS   */
/*  "AS IS"  AND ANY  EXPRESS OR IMPLIED  WARRANTIES, INCLUDING,  BUT NOT   */
/*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   */
/*  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT   */
/*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   */
/*  SPECIAL,  EXEMPLARY,  OR CONSEQUENTIAL  DAMAGES  (INCLUDING, BUT  NOT   */
/*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   */
/*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   */
/*  THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT  LIABILITY, OR TORT   */
/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   */
/*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    */
/*                                                                          */
/*                                                                          */
/*  This file defines a mechanism to collect and report profile results     */
/*  generated by the Kernel-C compiler (VCC) in profiling mode.  Profiling  */
/*  mode is activated with the VCC --profile option (--vcc_profile when     */
/*  invoked through the shell).                                             */
/*                                                                          */
/*  The mechanism works as follows:                                         */
/*   - VCC inserts instrumentation to collect cycle counts for the          */
/*     execution of the init() function and vloops() functions, when        */
/*     called via the kernel() API.                                         */
/*   - VCC calls __vcop_log_kernel_profile() to record the cycle counts.    */
/*   - At program termination, the cycle counts are automatically reported  */
/*     for each kernel for which results were recorded.                     */
/****************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <vcop/vcop.h>

/*****************************************************************************
* PROFILE_ENTRY
*    This class records cycle counts for a single kernel.
*****************************************************************************/
struct __PROFILE_ENTRY
{
   __PROFILE_ENTRY(const char*nm) : 
	kernel_name(nm), 
	init_cycles(0), 
	vloops_cycles(0),
	next(NULL) {}

   const char*    kernel_name;
   __TSC_TYPE     init_cycles;
   __TSC_TYPE     vloops_cycles;
   __PROFILE_ENTRY *next;
};

/*****************************************************************************
* VCOP_KERNEL_PROFILER
*     This is a singleton class that manages recording and reporting of 
*     kernel profile results. 
*****************************************************************************/
class __VCOP_KERNEL_PROFILER
{
public: 
   // upon construction, call _tsc_start() to enable the HW cycle timer
   __VCOP_KERNEL_PROFILER() :
      head(NULL), tail(NULL) 
      { _tsc_start(); } 

   // upon destruction (after main() returns) report results
   ~__VCOP_KERNEL_PROFILER() 
      { report();  clear();  } 

   // record a single entry
   void log(const char* name, __TSC_TYPE init, __TSC_TYPE vloops);

private:
   void             report(); 
   void             clear(); 
   __PROFILE_ENTRY* find(const char* name); 
   void             push_back(__PROFILE_ENTRY *ptr); 

   // profile entries are stored in a simple linked list
   __PROFILE_ENTRY* head; 
   __PROFILE_ENTRY* tail; 
};

/*---------------------------------------------------------------------------
* log() 
*    Record cycle counts for one invocation of a vcop kernel
*---------------------------------------------------------------------------*/
void __VCOP_KERNEL_PROFILER::log(const char* name, 
                                 __TSC_TYPE init, 
			         __TSC_TYPE vloops)
{
   // see if this kernel already has an entry
   __PROFILE_ENTRY *ptr = find(name); 

   // create a new entry and append to list
   if (!ptr)
   {
      ptr = new __PROFILE_ENTRY(name); 
      push_back(ptr); 
   }

   // add cycle counts to profile entry
   ptr->init_cycles   += init;
   ptr->vloops_cycles += vloops;
}

/*---------------------------------------------------------------------------
* find() 
*    Find an entry with a given kernel name
*---------------------------------------------------------------------------*/
__PROFILE_ENTRY* __VCOP_KERNEL_PROFILER::find(const char* name)
{
   // We expect the number of kernels to be small (<10?), so linear search ok
   // We also expect strings to be constants, so just compare pointers
   for (__PROFILE_ENTRY* ptr = head; ptr; ptr = ptr->next)
      if (ptr->kernel_name == name) return ptr; 
   return NULL;
}

/*---------------------------------------------------------------------------
* push_back()
*    Append a new entry to the list
*    We use a simple list rather than an STL container to avoid overhead
*---------------------------------------------------------------------------*/
void __VCOP_KERNEL_PROFILER::push_back(__PROFILE_ENTRY* ptr)
{
   if (tail == NULL)
      head = ptr;
   else
      tail->next = ptr;
   tail = ptr;
}

/*---------------------------------------------------------------------------
* report()
*    Report profile information at destruction time (after main() returns
*---------------------------------------------------------------------------*/
void __VCOP_KERNEL_PROFILER::report()
{
   if (!head)
      return;

   printf("kernel profiling results:\n"); 
   for (__PROFILE_ENTRY* ptr = head; ptr != NULL; ptr = ptr->next)
      printf("\t%s: init cycles=" __TSC_FMT " vloops cycles=" __TSC_FMT "\n", 
                ptr->kernel_name, 
                ptr->init_cycles, 
		ptr->vloops_cycles);
}

/*---------------------------------------------------------------------------
* clear()
*    Clear memory allocated for log entries 
*---------------------------------------------------------------------------*/
void __VCOP_KERNEL_PROFILER::clear()
{
   while (head)
   {
      __PROFILE_ENTRY* ptr = head;
      head = head->next;
      delete ptr;
   }
   tail = NULL;
}

/*---------------------------------------------------------------------------
* Singleton instance of profiler object
*    construction causes init
*    destruction triggers report
*---------------------------------------------------------------------------*/
static __VCOP_KERNEL_PROFILER __vcop_kernel_profiler; 

/*****************************************************************************
* __vcop_log_kernel_profile()
*     This is the only external API to the profiling mechanism. 
*     Automatically called from *_kernel() function generated by VCC
*****************************************************************************/
extern "C" 
void __vcop_log_kernel_profile(const char* name, 
                               __TSC_TYPE init, __TSC_TYPE vloops)
{
   __vcop_kernel_profiler.log(name, init, vloops); 
}

